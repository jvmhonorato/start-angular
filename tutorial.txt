. instalar angular: ng new <app name>

.  construir server na app, iniciar a app: ng s ou ng serve

. configurações padrão pra produção: ng build ou ng b

. src/app/app.component.html eu passo <h1>{{ title }}</h1>.

. e em src/app/app.component.ts eu chamo dentro de appComponent
public title = 'Bem vindo'

o metodo public pode ser usado em qualquer lugar

. comando pra criar component: ng g c <nome do componente>

.no arquivo ts do componente passar dentro da classe :
public title: string = 'Title test'; depois importar pra o html do componente {{title}}

. pra renderizar no app.component.html da app passar o <app-title></app-title>

. passar o router outlet do html pra o ts:
template: '<router-outlet></router-outlet>'

.em seguida apagar arquivos app.component.html, app.component.spec.test e app.sass pra deixar mais limpo por enquanto.



CICLOS DE VIDA DO ANGULAR

.Em app.component.ts implementar o OnInit no component, depois por o constructor() em seguida o ngOnInit()

.usar o seletor de title no template em app.component.ts

.Em title.component.ts implementar o OnInit e o onChanges na class com o tipo void

ONCHANGES
.uma vez a função onChanges passada, tudo que estiver dentro dela ira se manifestar toda vez que algo no input for alterado

.Em title.component.ts importar e  add o @Input ao public, em seguida em app.component.ts no template <app-title title="Olá Mundo">   adicionar o texto na props title pra ser renderizada

. Em app.component.ts criar uma tag button com o evento click chamando uma função add() que adiciona a estancia de valor + 1

. Em app.component.ts add <app-title *ngIf="drop">, estanciar um boolean em drop, em seguida criar uma função dropComponent() que quando chamada a função com o evento click mudar o valor de drop pra false assim destruindo o component

.Em title.component.ts importar o ciclo OnDestroy e passar ele na class

. Criar novo component dataBinding. 'ng g c dataBinding'

. cadastrar o selector'app-data-binding' no template  do app.component.ts <app-data-binding></app-data-binding>

. interpolations = {{}}

. criar função MouseMoveTest com evento MouseEvent e offSetx e offSetY pra renderizar a posição do cursor dentro da DIV

. EM app.module.ts add o FormModule e no html add o <input> com o ([ngModel)]="nome" pra aplicar o two-way-binding

DIRETIVAS

. Criar component diretivasEstruturais, colocar seletor em app.component.ts, sempre verificar se está sendo declarado em app.module.ts


*NGIF

. No html criar uma tag com *ngif chamando uma funçãp boolean e no ts passasr um setTimeOut dentro do ngOnInit com uma condicional pra a cada 2 segundos trocar o valor boleano! depois no html criar um condicional na tag pra que está o ngIf, criar o <ng-template #elseBlock><p>false</p></ng-template> vai renderizar o valor de template alternando com o valor que está no TS de acordo com o tempo do setTimeOut!

.Criar uma variável boleana conditionClick, depois criar uma uma função com uma condicional pra mudar ela de acordo com o button criado no HTML criado com o evento click chamando a função onClick criada no TS , declarar tambem  dois ngIf com conditionClick e !conditionClick

*NFOR

. criar um array de object com nome e idade no TS, depois em HTML criar um ngFor com *ngFor="let item of list; let i = index" passar os interpolations pra renderizar os dados na tela

. cria uma função pra add um object a cada click no TS e no HTML cria o <button> com o evento click

.add o splice pra remover os item da lista junto ao evento click


*NGSWITCH

.criar o ngswwitch na div chamando uma função nome e passar os case com valores distintos

. criar input com ngModes chamando a função nome pra renderiar dados de acordo com  o que for digitado

*NGCLASS

. ng g c diretivasAtributos

. criar no sass duas classes em seguida passar no html o ngClass chamando a classe desejada

.criar passar ambas as sass criadas no ngClass atribuida a um boolean valor de pois no TS passar criar valor e passar um set interval pra cambiar as classes de acordo com o tempo passado


*NGSTYLE

.cria no html um [ngStyle] chamando duas funções de Ts , uma pra alterar o tamanho da div de acordo com o tempo do setTimeOut, e  outra pra mudar a cor do background de acordo com o setTimeOut
