. instalar angular: ng new <app name>

.  construir server na app, iniciar a app: ng s ou ng serve

. configurações padrão pra produção: ng build ou ng b

. src/app/app.component.html eu passo <h1>{{ title }}</h1>.

. e em src/app/app.component.ts eu chamo dentro de appComponent
public title = 'Bem vindo'

o metodo public pode ser usado em qualquer lugar

. comando pra criar component: ng g c <nome do componente>


.no arquivo ts do componente passar dentro da classe :
public title: string = 'Title test'; depois importar pra o html do componente {{title}}

. pra renderizar no app.component.html da app passar o <app-title></app-title>

. passar o router outlet do html pra o ts:
template: '<router-outlet></router-outlet>'

.em seguida apagar arquivos app.component.html, app.component.spec.test e app.sass pra deixar mais limpo por enquanto.



CICLOS DE VIDA DO ANGULAR

.Em app.component.ts implementar o OnInit no component, depois por o constructor() em seguida o ngOnInit()

.usar o seletor de title no template em app.component.ts

.Em title.component.ts implementar o OnInit e o onChanges na class com o tipo void

ONCHANGES
.uma vez a função onChanges passada, tudo que estiver dentro dela ira se manifestar toda vez que algo no input for alterado

.Em title.component.ts importar e  add o @Input ao public, em seguida em app.component.ts no template <app-title title="Olá Mundo">   adicionar o texto na props title pra ser renderizada

. Em app.component.ts criar uma tag button com o evento click chamando uma função add() que adiciona a estancia de valor + 1

. Em app.component.ts add <app-title *ngIf="drop">, estanciar um boolean em drop, em seguida criar uma função dropComponent() que quando chamada a função com o evento click mudar o valor de drop pra false assim destruindo o component

.Em title.component.ts importar o ciclo OnDestroy e passar ele na class

. Criar novo component dataBinding. 'ng g c dataBinding'

. cadastrar o selector'app-data-binding' no template  do app.component.ts <app-data-binding></app-data-binding>

. interpolations = {{}}

. criar função MouseMoveTest com evento MouseEvent e offSetx e offSetY pra renderizar a posição do cursor dentro da DIV

. EM app.module.ts add o FormModule e no html add o <input> com o ([ngModel)]="nome" pra aplicar o two-way-binding

DIRETIVAS

. Criar component diretivasEstruturais, colocar seletor em app.component.ts, sempre verificar se está sendo declarado em app.module.ts


*NGIF

. No html criar uma tag com *ngif chamando uma funçãp boolean e no ts passasr um setTimeOut dentro do ngOnInit com uma condicional pra a cada 2 segundos trocar o valor boleano! depois no html criar um condicional na tag pra que está o ngIf, criar o <ng-template #elseBlock><p>false</p></ng-template> vai renderizar o valor de template alternando com o valor que está no TS de acordo com o tempo do setTimeOut!

.Criar uma variável boleana conditionClick, depois criar uma uma função com uma condicional pra mudar ela de acordo com o button criado no HTML criado com o evento click chamando a função onClick criada no TS , declarar tambem  dois ngIf com conditionClick e !conditionClick

*NFOR

. criar um array de object com nome e idade no TS, depois em HTML criar um ngFor com *ngFor="let item of list; let i = index" passar os interpolations pra renderizar os dados na tela

. cria uma função pra add um object a cada click no TS e no HTML cria o <button> com o evento click

.add o splice pra remover os item da lista junto ao evento click


*NGSWITCH

.criar o ngswwitch na div chamando uma função nome e passar os case com valores distintos

. criar input com ngModes chamando a função nome pra renderiar dados de acordo com  o que for digitado

*NGCLASS

. ng g c diretivasAtributos

. criar no sass duas classes em seguida passar no html o ngClass chamando a classe desejada

.criar passar ambas as sass criadas no ngClass atribuida a um boolean valor de pois no TS passar criar valor e passar um set interval pra cambiar as classes de acordo com o tempo passado


*NGSTYLE

.cria no html um [ngStyle] chamando duas funções de Ts , uma pra alterar o tamanho da div de acordo com o tempo do setTimeOut, e  outra pra mudar a cor do background de acordo com o setTimeOut


*NGMODEL

. pra que funcione o formModel tem que ser declarado,

. criar um input passando o ngModel  chamando um metodo, declarar o metodo em Ts depois passar o interpolations no HTML para que o que for digitado renderize no interpolation

.criar um <li> passando um ngFor passando um let item of list e um interpolation com {{item.name}} em seguida criar os metodos list tipado com Array

. criar uma função salvar() , e chamar ela no HTML com o evento (click)
pra salvar o que for digitado no campo de input


*NGTEMPLATE

.
usando o ngFor dentro do ng-template de forma mais organizada pra renderizar objetos de Array

NGCONTENT

. Em app.module.ts  add entre os seletor do component desejado a tah desejada com o conteúdo que quiser, em seguida no HTML do component inserir o <ng-content select="h1"> ai o conteúdo da template de app.component.ts será renderizado


Criando Sub-module

.pra compartilhar com toda a aplicação criar um shared: ng g m shared

.importar o SharedModule no app.module.ts se ele não importar automaticamente

.depois criar um component dentro de shared: ng g c shared/newComponent

.Em shared module declarar e exportar o component criado dentro de de shared pra que funcione


COMUNICAÇÃO ENTRE COMPONENTES

INPUT
.criar novo componente em shared: ng g c shared/input

.declarar e exportar em shared modules

.criar o  @Input() public contador e chamar no app.component.ts :<app-input [contador]= "addValue">

.o addValue cria no app.component.ts

.add buttons com evento click chamandp funções
OUTPUT

.Criar component output: ng g c /shared/output

.Em output.component.ts criar @Output public,

.Criar array de objetos tipados

. Criar função que será utilizada no evento click no HTML

.criar em output.component.ts o metodo publico @Output enviar dados

. em app.component.ts passasr o seleto app.output chamando injetando o "enviardados" criar uma função setDados() em app.component.ts e por ela atribuida a "envuar dados"

INJEÇÃO DE DEPENDÊNCIA

. criar um: ng g s services/foodList
pra compartilhar o array de objetos com a lista privada depois chamar metodo publico foodList()

.criar um componete compartilhado
ng g c /shared/foodList
declarar e exportar no shared module.ts, copiar o seletor e por no main app.component.ts

.em foodList.componet.ts criar um metodo array publico , em seguida fundir a classe de serviço que está em shared  no construtor, em seguida no ngOnit unir a classe de serviço de shared com o metodo array foodList
no food-list.component.html  passa o
<li *ngFor="let item of foodList">{{item}}</li>

COMUNICAÇÃO DE COMPONENTE COM services

crira novo componente em shared, o food-add, e declarar em shared.module.ts no import

.em food-list.service.ts cria um novo metodo foodListAdd dando um push no valor declarado posteriomente...

. em food-add.component.ts
criar metodo listAddItem(), e depois no html passar um input com uma classe e depois um button com o evento click chamando o metodo listAddItem() com aclasse do input dentro.

.Declarar o seletor em app.component.ts

. agora é só fazer  injeção de dependencia no construtor do
food-add.component.ts trazendo o metodo privado da class de serviço

SUBSCRIBE

.em food list service criar metodo emitEvent depois criar metodo publico foodListAlert retornando o emitEvent

.passar esse metodo dentro de foodListAdd

.EM FoodListComponent passar no ngOnInit o foodListService o subscribe e a mensagme do alert


.FAKE SERVER

. instalar: npm install -g json-server

.criar arquivo db.json e add objetos

.ENTRAR NA PASTA que está o db.json e startar com: json-server --watch db.json

depois no browser : http://localhost:3000/list-food pra ver os dados de db.json


REQUISIÇÕES http  GET

. Em food.list.service declarar o end point das api em seguida relacionar com HttpClient dentro do contrutor de forma privada

.Passar  =o http.get dentro do metodo foodList com e sua interface Observable<FoodList> e o get<FoodList>

.Criar um nova interface para o foodList: ng g i/modules/foodList

.Em shared.module.ts importat o HttpClientModule e declarar no import

.em food-list.component.ts add subscribe: this.foodListService.foodList().subscribe() pra ficar escutando



POST

.Criar na classe de serviço o http.post chamando a interface FoodList e passando o endpoint com o {nome:value}, em seguida passando o pipe com o res e o error

.EM  food-add.component.ts add o alert no subscribe


PUT

.Na classe de serviço criar foodListEdit() passando id na url e o metodo put

. em shared.model.ts importar e declarar o FormModule pra poder usasr o ngModel

.EM food-list.component.html passar input com ngModel e keyup chamando o metodo foodListEdit()

.Emfood-list.component.ts criar o metod foodListEdit()


DELETE
.Na classe de serviço criar foodListDelete() passando id na url e o metodo delete

.EM food-list.component.html add button com evento click chamando função foodListDelete()

.EM food-list.component.ts criar  o metodo foodListDelete() com subscribe


HTTP OPTIONS

.EM food-list.service.ts criar metoso httpOptions e passar nele o HttpHeaders. podendo aplicar ele nos metodos que desejar  como POST, GET e etc!!



FORMS

.Cadastrar em app.module.ts o FormsModule e dar o import

. criar um novo componente: ng g c forms

. Em forms.component.html passar <form #form="ngForm"> </form> e passar os campos de input e label

.passar input text, radio, checkbox e select 




